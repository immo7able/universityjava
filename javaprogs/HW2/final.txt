1)
import java.util.Scanner;

public class FINAL_1 {
    /*Напишите программу, которая считывает неопределенное количество целых чисел,
    определяет сколько положительных и отрицательных значений были прочитаны, и
    вычислите общее и среднее значение чисел и выведите на экран*/
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int positive=0, negative=0;
        double sum=0;
        while(true){
            int i=in.nextInt();
            if(i==0)break;
            else{
                sum+=i;
                if(i>0){
                    positive++;
                }if(i<0){
                    negative++;
                }
            }
        }
        System.out.println("Меньше 0 = " + negative);
        System.out.println("Больше 0 = " + positive);
        System.out.println("Сумма = " + sum);
        if(sum==0){
            System.out.println("Среднее = 0");
        }else
            System.out.println("Среднее = " + sum/(positive+negative));
    }
}
2)
/*Напишите программу, которая предлагает пользователю ввести количество учеников,
имя и оценку каждого ученика и отображает имя ученика с наивысшим баллом*/
import java.util.Scanner;

public class FINAL_2 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int count=0, quantity=in.nextInt();
        if(quantity<=0){
            System.out.println("Неправильное количество");
        }else{
            double max=0;
            String[] name = new String[quantity];
            double[] gpa = new double[quantity];
            for(int i=0;i<quantity;i++){
                name[i] = in.next();
                gpa[i] = in.nextDouble();
                if(gpa[i]>max) {
                    count = i;
                    max=gpa[i];
                }
            }
            System.out.println(name[count]+" "+gpa[count]);
        }
    }
}
3)
/*Напишите программу которая считывает с консоли String s, char a и char b. Нужно
заменить все символы a на символ b*/
import java.util.Scanner;

public class FINAL_3 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.next();
        char a = in.next().charAt(0);
        char b = in.next().charAt(0);
        s=s.replace(a,b);
        System.out.println(s);
    }
}
4)/*Создайте простой абстрактный класс Food, с полями и методами:
String name
У данного класса есть абстрактный метод - getCalories().
abstract double getCalories() - Метод возвращает количество калории.
Создайте класс Chocolate, который наследуется от класса Food
У класса Chocolate будет поле:
int weight
Нужно будет переопределить абстрактный метод getCalories().
Формула подсчета калорий для шоколада будет: weight * 740.
Создайте класса Burger который также наследуется от класса Food, и укажите такие
поля как:
int meatAmount; // количество мяса 1,2 или 3
int meatType; //тип мяса, 1 - это говядина, 2 - это курица.
Нужно будет переопределить абстрактный метод getCalories(). Формула подсчета
калорий для бургера: если тип мяса говядина, то meatAmount * 840, если курица, то
meatAmount * 560.
Создайте класс Coke, который наследуется от класса Food, и имеет такие поля как:
double volumeLiters;
boolean isSparkling; // Газированная или нет
Нужно будет переопределить абстрактный метод getCalories(). Формула подсчета
калорий будет таким образом: если газированная, то volumeLiters * 400, если нет, то
volumeLiters * 100.
В основном классе, создайте 2 шоколада (Snickers и Twix), 2 бургера (Burger King и
McDonalds), 2 напитка (Coca Cola и Fuse Tea) с разными значениями. Затем, добавьте
их в массив из абстрактного класса Food. Выведите название всех товаров с их
калориями. В конце отдельно выведите самую калорийную из них*/
public class FINAL_4 {
    public static void main(String[] args) {
        Chocolate a = new Chocolate("Snickers", 1);
        Chocolate b = new Chocolate("Twix", 2);
        Burger c = new Burger("Burger King", 1, 2);
        Burger d = new Burger("McDonalds", 2, 1);
        Coke e = new Coke("Coca-Cola", 1, true);
        Coke f = new Coke("Fuse-tea", 1, false);
        Food[] food = {a,b,c,d,e,f};
        int count=0;
        double max=0;
        for(int i=0;i<food.length;i++){
            System.out.println(food[i].getName()+" "+food[i].getCalories());
            if(food[i].getCalories()>max){max=food[i].getCalories();count=i;}
        }
        System.out.println("Max = " + food[count].getName()+" "+food[count].getCalories());
    }
}
abstract class Food{
    String name;
    public Food(String name){
        this.name = name;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    abstract double getCalories();
}
class Chocolate extends Food{
    int weight;
    public Chocolate(String name){
        super(name);
    }
    public Chocolate(String name, int weight){
        super(name);
        this.weight = weight;
    }
    public int getWeight() {
        return weight;
    }
    public void setWeight(int weight) {
        this.weight = weight;
    }
    @Override
    public double getCalories(){
        return weight*740;
    }
}
class Burger extends Food{
    int meatAmount;
    int meatType;
    public Burger(String name){
        super(name);
    }
    public Burger(String name, int meatAmount, int meatType){
        super(name);
        this.meatAmount = meatAmount;
        this.meatType = meatType;
    }
    public int getMeatAmount() {
        return meatAmount;
    }
    public void setMeatAmount(int meatAmount) {
        this.meatAmount = meatAmount;
    }
    public int getMeatType() {
        return meatType;
    }
    public void setMeatType(int meatType) {
        this.meatType = meatType;
    }
    @Override
    public double getCalories(){
        if(meatType == 1) return meatAmount*840;
        else return meatAmount*560;
    }
}
class Coke extends Food{
    double volumeLiters;
    boolean isSparkling;
    public Coke(String name){
        super(name);
    }
    public Coke(String name, double volumeLiters, boolean isSparkling){
        super(name);
        this.volumeLiters = volumeLiters;
        this.isSparkling = isSparkling;
    }
    public double getVolumeLiters() {
        return volumeLiters;
    }
    public void setVolumeLiters(double volumeLiters) {
        this.volumeLiters = volumeLiters;
    }
    public boolean isSparkling() {
        return isSparkling;
    }
    public void setSparkling(boolean sparkling) {
        isSparkling = sparkling;
    }
    @Override
    public double getCalories(){
        if(isSparkling == true) return volumeLiters*400;
        else return volumeLiters*100;
    }
}
5)/*Создайте класс Person со следующими полями и методами:
String name
String surname
String age
Создайте конструктор, все сеттеры и геттеры
String toString() – выводит все данные всех полей
Далее в Main классе создайте ArrayList<Person>. Добавьте 10 объектов Person,
отсортируйте их в порядке возрастания по возрасту
Выведите на экран все объекты в порядке возрастания по возрасту вызвав метод
toString()*/
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class FINAL_5 {
    public static void main(String[] args) {
        Person a = new Person("A","A","10");
        Person b = new Person("B","B","11");
        Person c = new Person("C","C","12");
        Person d = new Person("D","D","11");
        Person e = new Person("E","E","13");
        Person f = new Person("F","F","15");
        Person g = new Person("G","G","18");
        Person h = new Person("H","H","13");
        Person i = new Person("I","I","12");
        Person j = new Person("J","J","16");
        ArrayList<Person> persons= new ArrayList<Person>();
        persons.add(a);
        persons.add(b);
        persons.add(c);
        persons.add(d);
        persons.add(e);
        persons.add(f);
        persons.add(g);
        persons.add(h);
        persons.add(i);
        persons.add(j);
        Collections.sort(persons, new Comparator<Person>() {
            @Override
            public int compare(Person o1, Person o2) {
                return o1.getAge().compareTo(o2.getAge());
            }
        });
        for(int l=0;l< persons.size();l++){
            System.out.println(persons.get(l).toString());
        }
    }
}
class Person{
    String name;
    String surname;
    String age;
    public Person(String name, String surname, String age){
        this.name = name;
        this.surname = surname;
        this.age = age;
    }
    public Person(){}
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getSurname() {
        return surname;
    }
    public void setSurname(String surname) {
        this.surname = surname;
    }
    public String getAge() {
        return age;
    }
    public void setAge(String age) {
        this.age = age;
    }
    public String toString(){
        return "Name: "+this.name+" Surname: "+this.surname+" Age:"+this.age;
    }
}

