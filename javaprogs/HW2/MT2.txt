1)
public class Main{
    public static void main(String[] args) throws CloneNotSupportedException{
        Student a = new Student("Ahmad","Abuallaban", 3.9, "DE");
        Student b = a.clone();
        System.out.println(a.toString());
        System.out.println(b.toString());
    }
}
class Student implements Cloneable{
    String name;
    String surname;
    double gpa;
    String faculty;

    public Student(String name, String surname, double gpa, String faculty) {
        this.name = name;
        this.surname = surname;
        this.gpa = gpa;
        this.faculty = faculty;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public double getGpa() {
        return gpa;
    }

    public void setGpa(double gpa) {
        this.gpa = gpa;
    }

    public String getFaculty() {
        return faculty;
    }

    public void setFaculty(String faculty) {
        this.faculty = faculty;
    }
    public Student clone() throws CloneNotSupportedException{
        return (Student)super.clone();
    }
    @Override
    public String toString(){
        return "Name: "+this.name+" Surname: "+this.surname+" GPA:"+this.gpa+" Faculty:"+this.faculty;
    }
}
2)
import java.util.ArrayList;
import java.util.Collections;

public class Main2 {
    public static void main(String[] args) {
        ArrayList<Person> persons= new ArrayList<>();
        persons.add(new Person("A","A", 20));
        persons.add(new Person("B","B", 18));
        persons.add(new Person("C","C", 19));
        persons.add(new Person("D","D", 21));
        persons.add(new Person("E","E", 18));
        Collections.sort(persons);
        for(Person i:persons){
            System.out.println(i.toString());
        }
    }
}
class Person implements Comparable<Person>{
    String name;
    String surname;
    int age;

    public Person(String name, String surname, int age) {
        this.name = name;
        this.surname = surname;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
    @Override
    public int compareTo(Person a){
        return this.getAge()-a.getAge();
    }
    @Override
    public String toString(){
        return "Name: "+this.name+" Surname: "+this.surname+" Age:"+this.age;
    }
}
3)
import java.sql.SQLOutput;

public class Main3 {
    public static void main(String[] args) {
        try{
            Rectangle a = new Rectangle(1,2);
            System.out.println(a.toString()+" создан");
        }catch(TooSmallSideRectangleException e){}
        try{
            Rectangle b = new Rectangle(10,10);
            System.out.println(b.toString()+" создан");
        }catch(TooSmallSideRectangleException e){}
        try{
            Rectangle c = new Rectangle(9,11);
            System.out.println(c.toString()+" создан");
        }catch(TooSmallSideRectangleException e){}
        try{
            Rectangle d = new Rectangle(11,9);
            System.out.println(d.toString()+" создан");
        }catch(TooSmallSideRectangleException e){}
        try{
            Rectangle e = new Rectangle(11,11);
            System.out.println(e.toString()+" создан");
        }catch(TooSmallSideRectangleException e){}
    }
}
class Rectangle{
    int a;
    int b;

    public Rectangle(int a, int b) throws TooSmallSideRectangleException{
        if(a<10||b<10) throw new TooSmallSideRectangleException();
        else{
            this.a = a;
            this.b = b;
        }
    }

    public int getA() {
        return a;
    }

    public void setA(int a) {
        this.a = a;
    }

    public int getB() {
        return b;
    }

    public void setB(int b) {
        this.b = b;
    }
    @Override
    public String toString(){
        return "A: "+this.getA()+" B: "+this.getB();
    }
}
class TooSmallSideRectangleException extends Exception{
    public TooSmallSideRectangleException(){
        System.out.println("Side length can not be so small");
    }
}
4)
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main4 {
    public static void main(String[] args) {
        Map<String,Integer> map = new HashMap<>();
        Scanner in = new Scanner(System.in);
        String i;
        while(true) {
            i = in.next();
            if (i.equalsIgnoreCase("Marat"))
                break;
            else {
                try {
                    map.put(i, map.get(i) + 1);
                } catch (NullPointerException e) {
                    map.put(i, 1);
                }
            }
        }
        for(Map.Entry<String, Integer> entry: map.entrySet()) {
            System.out.println(entry.getKey()+" - "+entry.getValue());
        }
    }
}
5)package MT2_5;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;

public class Main5 {
    public static void main(String[] args) {
        ArrayList<Person> persons= new ArrayList<>();
        Scanner in = new Scanner(System.in);
        persons.add(new Person("A", "G", "Kz", 18));
        persons.add(new Person("C", "J", "Ru", 22));
        persons.add(new Person("B", "F", "Ar", 21));
        persons.add(new Person("D", "I", "Ua", 18));
        persons.add(new Person("E", "H", "Kg", 19));
        int a;
        while(true){
            System.out.println("1 - name<, 2 - surname>, 3 - citizenship<, 4 - age>, 0 - exit.");
            a=in.nextInt();
            if(a==1){
                Collections.sort(persons, new Comparator<Person>() {
                    @Override
                    public int compare(Person o1, Person o2) {
                        return o2.getName().compareTo(o1.getName());
                    }
                });
                for(Person i:persons){
                    System.out.println(i.toString());
                }
            } else if (a==2) {
                Collections.sort(persons, new Comparator<Person>() {
                    @Override
                    public int compare(Person o1, Person o2) {
                        return o1.getSurname().compareTo(o2.getSurname());
                    }
                });
                for(Person i:persons){
                    System.out.println(i.toString());
                }
            } else if (a==3) {
                Collections.sort(persons, new Comparator<Person>() {
                    @Override
                    public int compare(Person o1, Person o2) {
                        return o2.getCitizenship().compareTo(o1.getCitizenship());
                    }
                });
                for(Person i:persons){
                    System.out.println(i.toString());
                }
            } else if(a==4){
                Collections.sort(persons, new Comparator<Person>() {
                    @Override
                    public int compare(Person o1, Person o2) {
                        return o1.getAge()-o2.getAge();
                    }
                });
                for(Person i:persons){
                    System.out.println(i.toString());
                }
            } else if (a==0) {
                System.out.println("Выход");
                break;
            } else {
                System.out.println("Неправильный номер");
                continue;}
        }
    }
}
class Person{
    String name;
    String surname;
    String citizenship;
    int age;

    public Person(String name, String surname, String citizenship, int age) {
        this.name = name;
        this.surname = surname;
        this.citizenship = citizenship;
        this.age = age;
    }
    public Person(){}

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public String getCitizenship() {
        return citizenship;
    }

    public void setCitizenship(String citizenship) {
        this.citizenship = citizenship;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
    @Override
    public String toString(){
        return "Name: "+this.name+" Surname: "+this.surname+" Citizenship: "+this.citizenship+" Age: "+this.age;
    }
}
